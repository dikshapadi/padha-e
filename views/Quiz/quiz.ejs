<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <title>Quiz App</title>
  <script src="https://www.gstatic.com/firebasejs/9.3.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.3.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.3.0/firebase-database-compat.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f0f0f0;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      flex-direction: column;
      /* Added for vertical alignment */
    }

    .header {
      text-align: center;
      background-color: #007BFF;
      color: #fff;
      padding: 20px;
      margin: 0;
    }

    .content-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .quiz-list {
      list-style: none;
      padding: 0;
    }

    .quiz-list-item {
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 20px;
      width: 300px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      text-align: center;
      cursor: pointer;
      margin: 10px;
      transition: transform 0.2s;
    }

    .quiz-list-item:hover {
      transform: scale(1.05);
    }

    .quiz-questions {
      display: none;
    }

    h2 {
      color: #007BFF;
      margin-top: 10px;
    }

    .question-container {
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 20px;
    }

    label {
      display: block;
      margin-top: 10px;
    }

    button {
      background-color: #007BFF;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      margin-top: 10px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #0056b3;
    }
  </style>
</head>

<body>
  <h1>Quiz App</h1>
  <ul class="quiz-list" id="quiz-list"></ul>
  <div class="quiz-questions" id="quiz-questions">
    <h2>Questions</h2>
    <div id="question-container"></div>
    <div id="options-container"></div>
    <button id="next-question">Next Question</button>
    <button id="previous-question">Previous Question</button>
    <button id="exit-quiz">Exit Quiz</button>
    <button id="submit-quiz" style="display: none;">Submit</button>
  </div>

  <script>
   const firebaseConfig = {
            apiKey: "AIzaSyBD6ZsOT1P4lPZbQ0HVYHZrPGvaPk274ds",
            authDomain: "sih-e-f67f9.firebaseapp.com",
            databaseURL: "https://sih-e-f67f9-default-rtdb.asia-southeast1.firebasedatabase.app/",
            projectId: "sih-e-f67f9",
            storageBucket: "sih-e-f67f9.appspot.com",
            messagingSenderId: "113038032158",
            appId: "1:113038032158:web:6b01cde8843a62e8841d0f",
            measurementId: "G-FWVHBTC79W"
        };

    const app = firebase.initializeApp(firebaseConfig);
    const database = app.database();
    const auth = app.auth();

    function getCookie(name) {
      const cookieName = name + "=";
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i];
        while (cookie.charAt(0) === ' ') {
          cookie = cookie.substring(1);
        }
        if (cookie.indexOf(cookieName) === 0) {
          return cookie.substring(cookieName.length, cookie.length);
        }
      }
      return null; // Return null if the cookie is not found
    }

    // Retrieve the 'userId' cookie
    const userId = getCookie('userId');
    console.log(userId);


    document.getElementById('submit-quiz').addEventListener('click', () => {


      // Calculate the number of correct answers
      const numCorrectAnswers = userSelections.filter((answer, index) => answer === currentQuiz.questions[index].correct_answer).length;

      console.log(className, " ", quizName, " ", numCorrectAnswers);
      const quizData = {};
      quizData[quizName] = numCorrectAnswers;

      // Push the result to Firebase
      const userQuizRef = database.ref(`users/${userId}/quiz/${className}`);
      userQuizRef.update(quizData)
        .then(() => {
          alert('Quiz submitted successfully!');
          window.location.href = 'quiz'; // Redirect or perform any other action
        })
        .catch(error => console.error('Error submitting quiz:', error));
    });


  </script>

  <script>
    let quizData = [];
    let currentQuiz = null;
    let currentQuestionIndex = 0;
    let correctAnswers = 0;
    let userSelections = [];
    let className = null;
    let quizName = null;
    let quizCompletionStatus = {};

    const quizList = document.getElementById('quiz-list');
    const quizQuestions = document.getElementById('quiz-questions');
    const questionContainer = document.getElementById('question-container');
    const optionsContainer = document.getElementById('options-container');
    const nextQuestionButton = document.getElementById('next-question');
    const submitQuizButton = document.getElementById('submit-quiz');
    let quizPaths = [];

    const userClassRef = database.ref(`users/${userId}/class`);
    userClassRef.on('value', async (snapshot) => {
      const classValue = snapshot.val();

      if (classValue === 'primary') {
        
        quizPaths = ["/quiz/class1.json", "/quiz/class2.json", "/quiz/class3.json", "/quiz/class4.json", "/quiz/class5.json", "/quiz/class6.json"];
       
      } else if (classValue === 'secondary') {
        quizPaths = ["/quiz/class7.json", "/quiz/class8.json", "/quiz/class9.json", "/quiz/class10.json", "/quiz/class11.json", "/quiz/class12.json"];
      } else if (classValue === 'college') {
        quizPaths = ["/quiz/college1.json", "/quiz/college2.json"];
      } else {
        console.error('Invalid or missing class type' + classValue);
        return;
      }
      console.log('Class Value:', classValue);

      await loadAllQuizData();

    });


    let currentIndex = 0;

    async function loadAllQuizData() {
      for (const path of quizPaths) {
        try {
          const response = await fetch(path);
          const data = await response.json();
          quizData.push(data);
        } catch (error) {
          console.error('Error loading quiz data:', error);
        }
      }

      // All quizzes are loaded, populate the quiz list
      populateQuizList();
    }

    function populateQuizList() {
      quizList.innerHTML = '';

      const userQuizRef = database.ref(`users/${userId}/quiz`);
      userQuizRef.on('value', (snapshot) => {
        quizCompletionStatus = snapshot.val() || {};


        quizData.forEach(quiz => {
          for (const className in quiz) {
            const classListItem = document.createElement('li');
            classListItem.textContent = className;
            classListItem.classList.add('class-item');
            quizList.appendChild(classListItem);

            const classQuizzes = quiz[className];
            const classList = document.createElement('ul');

            classQuizzes.forEach(quizObj => {
              const quizName = Object.keys(quizObj)[0];
              const listItem = document.createElement('li');
              listItem.textContent = quizName;

              if (quizCompletionStatus[className] && quizCompletionStatus[className][quizName] !== undefined) {
                listItem.textContent += " (Completed)";
              }

              listItem.classList.add('quiz-list-item');
              listItem.setAttribute('data-class', className);
              listItem.setAttribute('data-quiz', quizName);
              classList.appendChild(listItem);
            });

            classListItem.appendChild(classList);
          }
        });
      });
    }

    function displayFirstQuiz() {
      const firstClassItem = document.querySelector('.class-item');
      if (firstClassItem) {
        const className = firstClassItem.getAttribute('data-class');
        const firstQuizItem = firstClassItem.querySelector('.quiz-list-item');
        if (firstQuizItem) {
          const quizName = firstQuizItem.getAttribute('data-quiz');
          loadQuiz(className, quizName);
          quizList.style.display = 'none';
          quizQuestions.style.display = 'block';
          nextQuestionButton.style.display = 'block';
        }
      }
    }

    function loadQuiz(classNm, quizNm) {
      className = classNm; // Set the global variable
      quizName = quizNm; // Set the global variable

      if (quizData) {
        const quiz = quizData.find(quiz => quiz[className] && quiz[className].find(q => q[quizName]));
        if (quiz) {
          const classQuizzes = quiz[className];
          const quizObj = classQuizzes.find(q => Object.keys(q)[0] === quizName);
          if (quizObj) {
            currentQuiz = quizObj[quizName];
            currentQuestionIndex = 0;
            correctAnswers = 0;
            userSelections = [];
            displayQuestion();
          }
        }
      }
    }

    function displayQuestion() {
      if (currentQuiz && currentQuestionIndex < currentQuiz.questions.length) {
        const question = currentQuiz.questions[currentQuestionIndex];
        questionContainer.innerHTML = `<p>${question.question}</p>`;
        displayOptions(question.options);
        nextQuestionButton.style.display = 'block';
        submitQuizButton.style.display = 'none';
      } else {
        questionContainer.innerHTML = `<p>Quiz completed. Correct answers: ${correctAnswers}/${currentQuiz.questions.length}</p>`;

        // Hide the "Next Question" button and show the "Submit" button
        nextQuestionButton.style.display = 'none';
        submitQuizButton.style.display = 'block';
      }
    }

    function displayOptions(options) {
      optionsContainer.innerHTML = '';
      options.forEach((option, index) => {
        const optionElement = document.createElement('input');
        optionElement.type = 'radio';
        optionElement.name = 'option';
        optionElement.id = `option${index}`;
        optionElement.value = option;

        if (userSelections[currentQuestionIndex] === option) {
          optionElement.checked = true;
        }

        const labelElement = document.createElement('label');
        labelElement.htmlFor = `option${index}`;
        labelElement.textContent = option;

        optionsContainer.appendChild(optionElement);
        optionsContainer.appendChild(labelElement);
        optionsContainer.appendChild(document.createElement('br'));
      });
    }

    quizList.addEventListener('click', (event) => {
      if (event.target.classList.contains('quiz-list-item')) {
        const className = event.target.getAttribute('data-class');
        const quizName = event.target.getAttribute('data-quiz');
        loadQuiz(className, quizName);
        quizList.style.display = 'none';
        quizQuestions.style.display = 'block';
        nextQuestionButton.style.display = 'block';
      }
    });

    const previousQuestionButton = document.getElementById('previous-question');

    previousQuestionButton.addEventListener('click', () => {
      if (currentQuestionIndex > 0) {
        const previousAnswer = userSelections[currentQuestionIndex - 1];
        const question = currentQuiz.questions[currentQuestionIndex - 1];
        if (previousAnswer === question.correct_answer) {
          correctAnswers--;
          console.log(correctAnswers);
        }

        currentQuestionIndex--;
        displayQuestion();
      }
    });

    const exitQuizButton = document.getElementById('exit-quiz');

    exitQuizButton.addEventListener('click', () => {
      window.location.href = 'quiz';
    });

    nextQuestionButton.addEventListener('click', () => {
      const selectedOption = document.querySelector('input[name="option"]:checked');
      if (selectedOption) {
        userSelections[currentQuestionIndex] = selectedOption.value;
        const question = currentQuiz.questions[currentQuestionIndex];
        if (selectedOption.value === question.correct_answer) {
          correctAnswers++;
          console.log(correctAnswers);
        }
      }

      currentQuestionIndex++;
      displayQuestion();
    });

  </script>
</body>

</html>